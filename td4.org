#+TITLE: td 4

Coinductif - corécrsif
#+BEGIN_SRC haskell
  uns::[Integer]
  uns = 1::uns
#+END_SRC

* Exercice 1

1)

#+BEGIN_SRC haskell
  genEntier :: Integer -> [Integer]
  genEntier n = n :(GenEntier n)
#+END_SRC

Ces définitions ne sont pas inductive mais coinductive

2) 

Récursive, non stricte (car pas besoin de connaître toute la liste ?)

Permet de prendre les n élément de la liste, potentiellement infinie :
#+BEGIN_SRC haskell
  prend :: Integer -> [a] -> [a]
  prend _ [] = []
  prend n (x:xs)  | n > 0  = x : (prend (n-1) xs)
		  | otherwise  = []
#+END_SRC

Inductive : on fabrique un élément à partir d'un cas de base, ça permet de créer tout les obejts finis possible
L ::= N | C x L
Co inductive : on peut fabriquer des objets infini (comme un générateur), et aussi tout les objets finis possible 
L ::=  C x L

3) 
#+BEGIN_SRC haskell
  -- pas de cas d'arrêt
  nats :: [Integer]
  nats = genNats 1
    where genNats n = n : (genNats (n+1))

#+END_SRC
4)

   
#+BEGIN_SRC haskell
  -- pas de cas d'arrêt
  nats2 :: [Integer]
  nats2 = 1 : map (+1) nats2
#+END_SRC

5)
   
#+BEGIN_SRC haskell
  fibo :: [Integer]
  fibo = genFibo 1 1
    where genFibo x y = x : (genFibo y (x+y))
#+END_SRC

6)
 
#+BEGIN_SRC haskell
  fibo2 :: [Integer]
  fibo2 = 1:1:zipwith  (+) fibo2 (tail fibo2)
#+END_SRC

* Exercice 2

[x * x | x <- [1..5]] -> Liste des x² pour les 5 premiers x
1) 

#+BEGIN_SRC haskell
  flatMap:: (a -> [b]) -> [a] -> [b]
  flatMap _ [] = []
  flatMap f (x:xs) = (f x) ++ (flatMap f xs)


  ----------

  flatMap = fold step [] 
    where step x acc = fold (:) acc (f x)
#+END_SRC

2)
   type de compr
#+BEGIN_SRC haskell
  comp :: [a] -> (a -> [b]) -> [b]
  compr = flip flatmap
#+END_SRC

2.
   a. [1, 4, 9, 16, 25, 36, 49, 64, 81,  100]
   b. [1, 10, 100, 2, 20, 200, 3, 30, 300]
   c. [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2)] 

3)

1.
a) [2, 4, 6, 8]
c) [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] -> 10 éléments
d) [(2, 4), (4, 16), ...]
2.
#+BEGIN_SRC haskell
  select :: (a -> Bool) -> (a -> b) -> a -> [b]
  select p f x = if (p x) then success (f x) else failure
#+END_SRC
3.

#+BEGIN_SRC haskell
  select (>= x) (\z -> (x, z))
#+END_SRC
* Exercice 3
1)
   
#+BEGIN_SRC haskell
  data Arbre a = Bout
	       | Noeud a (Arbre a) (Arbre a)
  leaf :: a -> Arbre a
  leaf x = Noeud x Bout Bout

  maxArbre :: Ord a => Arbre a -> Maybe a
  maxArbre Bout = Nothing
  maxArbre (Noeud v fg fd) = case (maxArbre fg, maxArbre fd) of
    (Nothing, Nothing) -> Just v
    | (Nothing, Just x2) -> Just (max v x2)
    | (Just x1, Nothing) -> Just (max v x1)
    | (Just x1, Just x2) -> Just (max v (max x1 x2) )
                               
#+END_SRC

2)

#+BEGIN_SRC haskell
  addArbre :: Num a => a -> Arbre a -> Arbre a
  addArbre _ Bout = Bout
  addArbre x (Noeud v fg fd) = Noeud (v+x) (addArbre x fg) (addArbre x fd)

  addMaxArbre :: (Num a, Ord a) => Arbre a -> Arbre a
  addMaxArbre Bout = Bout
  addMaxArbre t =
    case maxArbre t of
      Nothing -> Bout
      Just x -> addArbre x t 

  addMaxArbre2 :: (Num a, Ord a) => Arbre a -> Arbre a
  addMaxArbre2 t = t'
  where (t', m) = parcours t 
  parcours Bout = (Bout, Nothing)
  parcours (Noeud v fg fd) =
    case (parcours fg, parcours fd) of
    | (_, Nothing), (_, Nothing) -> (Noeud (v+m) Bout Bout, Just v)
    | (_, Nothing), (fd', Just m2) -> (Noeud (v+m) Bout fd' , Just max v m2)
    | (fg', Just m1) , (_, Nothing) -> (Noeud (v+m) fg' Bout, Just (max v m1))
    | (fg', Just m1), (fd', Just m2) -> Noeud (v+m) fg' fd',  Just (max v (max m1 m2))
#+END_SRC


